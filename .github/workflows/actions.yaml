# actions.yml

name: Docker Build Python Package using Conda (alethic-ism-core module)

on: [push, pull_request]

jobs:
  build-and-upload:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      id: code_checkout
      uses: actions/checkout@v2

    - name: Assign Environment Variables for Build & Deployment Process
      id: setup_variables

      run: |
        COMMIT_ID=$(echo $GITHUB_SHA | head -c7)
        TAG="krasaee/alethic-ism-api:$COMMIT_ID"
        
        echo "COMMIT_ID=$COMMIT_ID" >> "$GITHUB_ENV" # for local variables
        echo "TAG=$TAG" >> "$GITHUB_ENV" # for local variables

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
      
    - name: Fetch Alethic ISM Core Module Artifact
      id: get-artifact
      run: |
        
        AUTH_HEADER="Authorization: token ${{ secrets.ALETHIC_GITHUB_ACTION_PACKAGE_ACCESS_TOKEN }}"
        
        # Replace with the correct owner and repository
        OWNER="quantumwake"
        REPO="alethic-ism-core"

        # Fetch artifacts list from GitHub API
        ARTIFACTS_URL="https://api.github.com/repos/$OWNER/$REPO/actions/artifacts"
        ARTIFACTS_JSON=$(curl -s $ARTIFACTS_URL)
        echo $ARTIFACT_URL
        echo $ARTIFACT_JSON

        # Use jq to parse the JSON and find the artifact that matches the pattern
        ARTIFACT_NAME=$(echo $ARTIFACTS_JSON | jq -r '[.artifacts[] | {name: .name, created_at: .created_at}] | sort_by(.created_at) | reverse[0] | .name' )
        #ARTIFACT_NAME=$(echo $ARTIFACTS_JSON | jq -r '.artifacts[] | select(.name | test("alethic-ism-core_*.*.*_*.tar.gz")) | .name')

        ARTIFACT_DOWNLOAD_URL=$(echo $ARTIFACTS_JSON | jq -r ".artifacts[] | select(.name == \"$ARTIFACT_NAME\") | .archive_download_url")
        echo $ARTIFACT_NAME
        echo $ARTIFACT_DOWNLOAD_URL

        # Set the output
        echo "::set-output name=url::$ARTIFACT_DOWNLOAD_URL"
        curl -H "$AUTH_HEADER" -L $ARTIFACT_DOWNLOAD_URL -o artifact.zip
        
        # debugging purposes
        # echo "listing files: "
        # ls ./
        # head artifact.zip
        
        # Unzip to extract the original tar.bz2 file
        unzip artifact.zip

    - name: Build Package Artifact 
      id: build-conda-package
      run: |
        bash ./docker_build_conda_package.sh
        bash ./docker_extract_conda_package.sh
        
    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ steps.build-conda-package.outputs.file_name }}
        path: ${{ steps.build-conda-package.outputs.file_name }}
